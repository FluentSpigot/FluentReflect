[SIZE=12]# Fluent Reflect[/SIZE][URL='https://jitpack.io/#jwdeveloper/SpigotTester'][IMG]https://jitpack.io/v/jwdeveloper/SpigotTester.svg[/IMG][/URL]
FluentReflect is a Java library designed to simplify the usage of reflection in Java programs. With FluentReflect, developers can easily search for and manipulate
[LIST]
[*]classes
[*]fields
[*]methods
[*]contructors
[*]enums
[/LIST]


without having to write verbose and complex reflection code.

One of the key features of FluentReflect is its fluent interface, which allows developers to chain together multiple reflection operations in a concise and readable manner. For example, to find a specific class, developers can use the findClass() method and then chain together various options to narrow down the search, such as specifying the Java version and the class name.

FluentReflect also includes a number of convenience methods for common reflection operations, such as getting and setting field values and invoking methods. Additionally, the library provides a number of utilities for working with annotations, including searching for annotated classes and fields and reading annotation values.

[SIZE=12]# Examples[/SIZE]

[CODE=java]
package io.github.jwdeveloper.examples._1_0_0;

public class ExampleClass
{
    private final String name;

    public ExampleClass(String name)
    {
        this.name = name;
    }

    protected String helloWorld()
    {
       return "Hello world my name is "+name;
    }
}

[/CODE][CODE=java]
package io.github.jwdeveloper.examples;

import io.github.jwdeveloper.reflect.api.models.ClassModel;
import io.github.jwdeveloper.reflect.api.models.ConstructorModel;
import io.github.jwdeveloper.reflect.api.models.FieldModel;
import io.github.jwdeveloper.reflect.api.models.MethodModel;
import io.github.jwdeveloper.reflect.implementation.FluentReflect;

import java.lang.reflect.InvocationTargetException;

public class Main {
    public static void main(String[] args) throws InvocationTargetException, IllegalAccessException, InstantiationException {

        String apiVersion = "1.0.0";
        FluentReflect fluentReflect = new FluentReflect(apiVersion);

        //In case using reflections for Library that changes packages names every new version it is
        //pretty handle use method `forVersion()`
        ClassModel exampleClass = fluentReflect.findClass()
                .forVersion("1.0.0", finder ->
                {
                    finder.withName("io.github.jwdeveloper.examples._1_0_0.ExampleClass");
                })
                .forVersion("2.0.0", finder ->
                {
                    finder.withName("io.github.jwdeveloper.examples._2_0_0.ExampleClass");
                }).find();

        FieldModel nameField = exampleClass
                .findField()
                .forAnyVersion(finder ->
                {
                    finder.withPrivate();
                    finder.withType(String.class);
                    finder.withFinal();
                }).find();

        MethodModel helloWorldMethod = exampleClass
                .findMethod()
                .forAnyVersion(finder ->
                {
                    finder.withName("helloWorld");
                    finder.withProtected();
                    finder.withType(String.class);
                }).find();

        ConstructorModel constructor = exampleClass
                .findConstructor()
                .forAnyVersion(finder ->
                {
                    finder.withParameterCount(1);
                }).find();


        Object instance = constructor.newInstance("Mike");
        Object nameValue = nameField.getValue(instance);
        Object methodResult = helloWorldMethod.invoke(instance);

        System.out.println(instance.toString()+" Name:"+nameValue+" Method output:"+methodResult);
    }
}
[/CODE]